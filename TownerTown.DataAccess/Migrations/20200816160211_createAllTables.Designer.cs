// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TownerTown.DataAccess;

namespace TownerTown.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20200816160211_createAllTables")]
    partial class createAllTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TownerTown.Entities.Business", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("BlockReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BusinessOwnerID")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<int>("Membership")
                        .HasColumnType("int");

                    b.Property<int>("OverallRating")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.Property<string>("Products")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimingsID")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("BusinessOwnerID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("TimingsID");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("TownerTown.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("TownerTown.Entities.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessID")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BusinessID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TownerTown.Entities.DayToTimeMapping", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DayToTimeMapping");
                });

            modelBuilder.Entity("TownerTown.Entities.FilePath", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessID")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BusinessID");

                    b.ToTable("FilePath");
                });

            modelBuilder.Entity("TownerTown.Entities.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lattitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PinCode")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TownerTown.Entities.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PayedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("TownerTown.Entities.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessID")
                        .HasColumnType("int");

                    b.Property<long>("MobileNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewdOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewID");

                    b.HasIndex("BusinessID");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("TownerTown.Entities.Timings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FridayID")
                        .HasColumnType("int");

                    b.Property<int?>("MondayID")
                        .HasColumnType("int");

                    b.Property<int?>("SaturdayID")
                        .HasColumnType("int");

                    b.Property<int?>("SundayID")
                        .HasColumnType("int");

                    b.Property<int?>("ThursdayID")
                        .HasColumnType("int");

                    b.Property<int?>("TuesdayID")
                        .HasColumnType("int");

                    b.Property<int?>("WednesdayID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FridayID");

                    b.HasIndex("MondayID");

                    b.HasIndex("SaturdayID");

                    b.HasIndex("SundayID");

                    b.HasIndex("ThursdayID");

                    b.HasIndex("TuesdayID");

                    b.HasIndex("WednesdayID");

                    b.ToTable("Timings");
                });

            modelBuilder.Entity("TownerTown.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TownerTown.Entities.Business", b =>
                {
                    b.HasOne("TownerTown.Entities.Location", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("TownerTown.Entities.User", "BusinessOwner")
                        .WithMany()
                        .HasForeignKey("BusinessOwnerID");

                    b.HasOne("TownerTown.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("TownerTown.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID");

                    b.HasOne("TownerTown.Entities.Timings", "Timings")
                        .WithMany()
                        .HasForeignKey("TimingsID");
                });

            modelBuilder.Entity("TownerTown.Entities.Contact", b =>
                {
                    b.HasOne("TownerTown.Entities.Business", null)
                        .WithMany("Contacts")
                        .HasForeignKey("BusinessID");
                });

            modelBuilder.Entity("TownerTown.Entities.FilePath", b =>
                {
                    b.HasOne("TownerTown.Entities.Business", null)
                        .WithMany("Images")
                        .HasForeignKey("BusinessID");
                });

            modelBuilder.Entity("TownerTown.Entities.Review", b =>
                {
                    b.HasOne("TownerTown.Entities.Business", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BusinessID");
                });

            modelBuilder.Entity("TownerTown.Entities.Timings", b =>
                {
                    b.HasOne("TownerTown.Entities.DayToTimeMapping", "Friday")
                        .WithMany()
                        .HasForeignKey("FridayID");

                    b.HasOne("TownerTown.Entities.DayToTimeMapping", "Monday")
                        .WithMany()
                        .HasForeignKey("MondayID");

                    b.HasOne("TownerTown.Entities.DayToTimeMapping", "Saturday")
                        .WithMany()
                        .HasForeignKey("SaturdayID");

                    b.HasOne("TownerTown.Entities.DayToTimeMapping", "Sunday")
                        .WithMany()
                        .HasForeignKey("SundayID");

                    b.HasOne("TownerTown.Entities.DayToTimeMapping", "Thursday")
                        .WithMany()
                        .HasForeignKey("ThursdayID");

                    b.HasOne("TownerTown.Entities.DayToTimeMapping", "Tuesday")
                        .WithMany()
                        .HasForeignKey("TuesdayID");

                    b.HasOne("TownerTown.Entities.DayToTimeMapping", "Wednesday")
                        .WithMany()
                        .HasForeignKey("WednesdayID");
                });
#pragma warning restore 612, 618
        }
    }
}
